"""
Route definitions for the CultivAR application.
"""

from flask import render_template, redirect, url_for, request, flash, jsonify, session, abort, current_app, send_from_directory
from flask_login import login_user, logout_user, login_required, current_user
from werkzeug.security import check_password_hash
from models.base_models import User, Plant, Strain, Sensor, Stream, db
from app.utils.auth import check_password
from app.utils.helpers import format_date, format_datetime
from app.handlers import plant_handlers, strain_handlers, sensor_handlers, settings_handlers, breeder_handlers
from app.config import Config
from app.logger import logger

def register_routes(app):
    """
    Register all routes for the application.

    Args:
        app: The Flask application.
    """
    # Register basic routes
    register_basic_routes(app)

    # Register authentication routes
    register_auth_routes(app)

    # Register protected routes
    register_protected_routes(app)

    # Register API routes
    register_api_routes(app)

    # Register strain routes
    from app.routes.strain_routes import register_strain_routes
    register_strain_routes(app)

def register_basic_routes(app):
    """
    Register basic routes that don't require authentication.

    Args:
        app: The Flask application.
    """
    @app.route('/health')
    def health():
        """Health check endpoint."""
        return jsonify({"status": "ok"})

    @app.route('/favicon.ico')
    def favicon():
        """Serve the favicon."""
        return app.send_static_file('img/favicon.ico')

def register_auth_routes(app):
    """
    Register authentication routes.

    Args:
        app: The Flask application.
    """
    @app.route('/login', methods=['GET', 'POST'])
    def login():
        """Handle user login."""
        if request.method == 'POST':
            username = request.form.get('username')
            password = request.form.get('password')

            user = User.query.filter_by(username=username).first()

            if user and check_password(password, user.password):
                login_user(user)

                # Check if the user needs to change their password
                if user.force_password_change:
                    return redirect(url_for('change_password'))

                # Redirect to the requested page or the dashboard
                next_page = request.args.get('next')
                return redirect(next_page or url_for('dashboard'))

            flash('Invalid username or password', 'error')

        return render_template('views/login_consolidated.html', admin_login=False)

    @app.route('/logout')
    @login_required
    def logout():
        """Handle user logout."""
        logout_user()
        return redirect(url_for('login'))

    @app.route('/change-password', methods=['GET', 'POST'])
    @login_required
    def change_password():
        """Handle password change."""
        if request.method == 'POST':
            new_password = request.form.get('new_password')
            confirm_password = request.form.get('confirm_password')

            if new_password != confirm_password:
                flash('Passwords do not match', 'error')
                return render_template('views/change-password.html')

            # Update the user's password
            settings_handlers.update_user_password(current_user.id, new_password)

            # Redirect to the dashboard
            flash('Password changed successfully', 'success')
            return redirect(url_for('dashboard'))

        return render_template('views/change-password.html')

def register_protected_routes(app):
    """
    Register routes that require authentication.

    Args:
        app: The Flask application.
    """
    @app.route('/')
    @login_required
    def dashboard():
        """Render the dashboard."""
        plants = plant_handlers.get_living_plants()
        strains = len(Config.Strains) if hasattr(Config, 'Strains') else 0
        sensors = sensor_handlers.get_sensors()
        sensors_count = len(sensors) if sensors else 0
        harvests = plant_handlers.get_harvested_plants()
        harvests_count = len(harvests) if harvests else 0

        return render_template('views/index.html',
                              title='Dashboard',
                              plants=plants,
                              strains=strains,
                              sensors=sensors_count,
                              harvests=harvests_count,
                              activities=Config.Activities)

    @app.route('/plants')
    @login_required
    def plants():
        """Render the plants page."""
        return render_template('views/plants.html',
                              title='Plants',
                              zones=Config.Zones,
                              strains=Config.Strains,
                              statuses=Config.Statuses,
                              breeders=Config.Breeders,
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities)

    @app.route('/strains')
    @login_required
    def strains():
        """Render the strains page."""
        return render_template('views/strains.html',
                              title='Strains',
                              strains=Config.Strains,
                              breeders=Config.Breeders,
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities)

    @app.route('/graph/<int:sensor_id>')
    @login_required
    def graph(sensor_id):
        """Render the sensor graph page."""
        return render_template('views/graph.html',
                              title='Sensor Graphs',
                              sensor_id=sensor_id,
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities)

    @app.route('/plant/<int:plant_id>')
    @login_required
    def plant(plant_id):
        """Render the plant details page."""
        plant = plant_handlers.get_plant(plant_id)
        return render_template('views/plant.html',
                              title='Plant Details',
                              plant=plant,
                              zones=Config.Zones,
                              strains=Config.Strains,
                              statuses=Config.Statuses,
                              breeders=Config.Breeders,
                              measurements=Config.Metrics,
                              sensors=sensor_handlers.get_sensors(),
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities)

    @app.route('/strain/<int:strain_id>')
    @login_required
    def strain(strain_id):
        """Render the strain details page."""
        import math
        strain = strain_handlers.get_strain(strain_id)
        return render_template('views/strain.html',
                              title='Strain Details',
                              strain=strain,
                              breeders=Config.Breeders,
                              zones=Config.Zones,
                              config=Config,
                              math=math)

    @app.route('/settings')
    @login_required
    def settings():
        """Render the settings page."""
        return render_template('views/settings_functional.html',
                              title='Settings',
                              settings=settings_handlers.get_settings(),
                              zones=Config.Zones,
                              metrics=Config.Metrics,
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities,
                              breeders=Config.Breeders,
                              streams=Stream.query.all())

    @app.route('/sensors')
    @login_required
    def sensors():
        """Render the sensors page."""
        return render_template('views/sensors.html',
                              title='Sensors',
                              settings=settings_handlers.get_settings(),
                              sensors=sensor_handlers.get_sensors(),
                              zones=Config.Zones,
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities)

    @app.route('/market/seed-bank')
    @login_required
    def market_seed_bank():
        """Render the seed bank page."""
        return render_template('views/market/seed_bank.html',
                              title='Seed Bank',
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities)

    @app.route('/market/extensions')
    @login_required
    def market_extensions():
        """Render the extensions page."""
        return render_template('views/market/extensions.html',
                              title='Extensions',
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities)

    @app.route('/market/gear')
    @login_required
    def market_gear():
        """Render the gear page."""
        return render_template('views/market/gear.html',
                              title='Gear',
                              plants=plant_handlers.get_living_plants(),
                              activities=Config.Activities)

def register_api_routes(app):
    """
    Register API routes.

    Args:
        app: The Flask application.
    """
    # Plant API routes
    @app.route('/plants/living', methods=['GET'])
    @login_required
    def living_plants():
        """Get all living plants."""
        plants = plant_handlers.get_living_plants()
        return jsonify(plants)

    @app.route('/plants/harvested', methods=['GET'])
    @login_required
    def harvested_plants():
        """Get all harvested plants."""
        plants = plant_handlers.get_harvested_plants()
        return jsonify(plants)

    @app.route('/plants/dead', methods=['GET'])
    @login_required
    def dead_plants():
        """Get all dead plants."""
        plants = plant_handlers.get_dead_plants()
        return jsonify(plants)

    @app.route('/plants/by-strain/<int:strain_id>', methods=['GET'])
    @login_required
    def plants_by_strain(strain_id):
        """Get all plants for a strain."""
        plants = plant_handlers.get_plants_by_strain(strain_id)
        return jsonify(plants)

    @app.route('/plants', methods=['POST'])
    @login_required
    def add_plant():
        """Add a new plant."""
        data = request.json
        print(f"Received plant data: {data}")
        plant = plant_handlers.add_plant(data)
        print(f"Plant handler response: {plant}")
        return jsonify(plant)

    @app.route('/plant', methods=['POST'])
    @login_required
    def update_plant():
        """Update a plant."""
        data = request.json
        plant = plant_handlers.update_plant(data)
        return jsonify(plant)

    @app.route('/plant/delete/<int:plant_id>', methods=['DELETE'])
    @login_required
    def delete_plant(plant_id):
        """Delete a plant."""
        result = plant_handlers.delete_plant(plant_id)
        return jsonify(result)

    @app.route('/plant/link-sensors', methods=['POST'])
    @login_required
    def link_sensors_to_plant():
        """Link sensors to a plant."""
        data = request.json
        result = plant_handlers.link_sensors_to_plant(data)
        return jsonify(result)

    @app.route('/plant/<int:plant_id>/images/upload', methods=['POST'])
    @login_required
    def upload_plant_images(plant_id):
        """Upload images for a plant."""
        files = request.files.getlist('images')
        description = request.form.get('description', '')
        result = plant_handlers.upload_plant_images(plant_id, files, description)
        return jsonify(result)

    @app.route('/plant/images/<int:image_id>/delete', methods=['DELETE'])
    @login_required
    def delete_plant_image(image_id):
        """Delete a plant image."""
        result = plant_handlers.delete_plant_image(image_id)
        return jsonify(result)

    @app.route('/plant/activity', methods=['POST'])
    @login_required
    def record_plant_activity():
        """Record a plant activity."""
        data = request.json
        result = plant_handlers.record_activity(data)
        return jsonify(result)

    # Admin routes
    @app.route('/admin/login', methods=['GET', 'POST'])
    def admin_login():
        """Handle admin login."""
        if request.method == 'POST':
            username = request.form.get('username')
            password = request.form.get('password')

            # Check if admin credentials are valid
            # In a real app, you would use a more secure approach
            if username == 'admin' and password == 'cultivar_admin':
                session['admin'] = True
                flash('Admin login successful', 'success')
                return redirect(url_for('admin_dashboard'))
            else:
                flash('Invalid admin credentials', 'danger')

        return render_template('views/login_consolidated.html', admin_login=True, title='Admin Login')

    @app.route('/admin/logout')
    def admin_logout():
        """Handle admin logout."""
        session.pop('admin', None)
        flash('Admin logout successful', 'success')
        return redirect(url_for('admin_login'))

    @app.route('/admin/users')
    def admin_users():
        """Render the admin users page."""
        if not session.get('admin'):
            flash('Admin login required', 'danger')
            return redirect(url_for('admin_login'))

        # Get all users
        users = User.query.all()

        # Add some additional properties for the template
        for user in users:
            user.is_admin = user.role == 'admin' if hasattr(user, 'role') else False
            user.is_active = True  # In a real app, you'd check a status field

            # Format last login time if available
            if hasattr(user, 'last_login') and user.last_login:
                user.last_login = user.last_login.strftime('%Y-%m-%d %H:%M')
            else:
                user.last_login = None

        return render_template('views/admin_users.html',
                              title='User Management',
                              users=users)

    @app.route('/admin/test')
    def admin_test():
        """A simple test page to verify the server is running."""
        return render_template('views/admin_test.html')

    @app.route('/admin')
    def admin_dashboard():
        """Render the admin dashboard."""
        if not session.get('admin'):
            flash('Admin login required', 'danger')
            return redirect(url_for('admin_login'))

        # Get system information
        import sys
        import flask
        import platform
        import os
        import sqlite3
        import datetime
        from sqlalchemy import func

        # System versions
        python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
        flask_version = flask.__version__
        os_name = platform.system()
        os_version = platform.version()

        # Database information
        db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'data', 'cultivar.db')
        db_size = os.path.getsize(db_path) if os.path.exists(db_path) else 0
        db_size_mb = round(db_size / (1024 * 1024), 2)

        # Get application statistics
        plant_count = db.session.query(func.count(Plant.id)).scalar() or 0
        strain_count = db.session.query(func.count(Strain.id)).scalar() or 0
        user_count = db.session.query(func.count(User.id)).scalar() or 0
        sensor_count = db.session.query(func.count(Sensor.id)).scalar() if 'Sensor' in globals() else 0

        # Get recent activities
        recent_activities = []
        try:
            # This is a placeholder - in a real app, you'd have an Activity model
            # recent_activities = Activity.query.order_by(Activity.timestamp.desc()).limit(5).all()

            # For now, we'll create some sample activities
            activities = [
                {'type': 'login', 'user': 'admin', 'timestamp': datetime.datetime.now() - datetime.timedelta(minutes=5)},
                {'type': 'plant_add', 'user': 'john', 'plant': 'Blue Dream #4', 'timestamp': datetime.datetime.now() - datetime.timedelta(hours=2)},
                {'type': 'strain_edit', 'user': 'admin', 'strain': 'OG Kush', 'timestamp': datetime.datetime.now() - datetime.timedelta(hours=6)},
                {'type': 'sensor_reading', 'sensor': 'Temp-1', 'value': '78.5°F', 'timestamp': datetime.datetime.now() - datetime.timedelta(hours=1)},
                {'type': 'user_add', 'user': 'admin', 'new_user': 'sarah', 'timestamp': datetime.datetime.now() - datetime.timedelta(days=1)}
            ]
            recent_activities = activities
        except Exception as e:
            print(f"Error getting activities: {e}")

        # Get system uptime (simulated for now)
        uptime = "3 days, 7 hours, 22 minutes"

        return render_template('views/admin_dashboard.html',
                              title='Admin Dashboard',
                              python_version=python_version,
                              flask_version=flask_version,
                              os_name=os_name,
                              os_version=os_version,
                              db_size_mb=db_size_mb,
                              plant_count=plant_count,
                              strain_count=strain_count,
                              user_count=user_count,
                              sensor_count=sensor_count,
                              recent_activities=recent_activities,
                              uptime=uptime)

    # Strain API routes
    @app.route('/strains/<int:strain_id>', methods=['GET'])
    @login_required
    def get_strain_api(strain_id):
        """Get a strain."""
        strain = strain_handlers.get_strain(strain_id)
        return jsonify(strain)

    @app.route('/strains/in-stock', methods=['GET'])
    @login_required
    def in_stock_strains():
        """Get all in-stock strains."""
        strains = strain_handlers.get_in_stock_strains()
        return jsonify(strains)

    @app.route('/strains/out-of-stock', methods=['GET'])
    @login_required
    def out_of_stock_strains():
        """Get all out-of-stock strains."""
        strains = strain_handlers.get_out_of_stock_strains()
        return jsonify(strains)

    @app.route('/strains', methods=['POST'])
    @login_required
    def add_strain():
        """Add a new strain."""
        data = request.json
        strain = strain_handlers.add_strain(data)

        # Reload configuration from database
        from app.config.load_config import load_config_from_db
        load_config_from_db()

        return jsonify(strain)

    @app.route('/strains/<int:strain_id>', methods=['PUT'])
    @login_required
    def update_strain(strain_id):
        """Update a strain."""
        data = request.json
        strain = strain_handlers.update_strain(strain_id, data)

        # Reload configuration from database
        from app.config.load_config import load_config_from_db
        load_config_from_db()

        return jsonify(strain)

    @app.route('/strains/<int:strain_id>', methods=['DELETE'])
    @login_required
    def delete_strain(strain_id):
        """Delete a strain."""
        result = strain_handlers.delete_strain(strain_id)

        # Reload configuration from database
        from app.config.load_config import load_config_from_db
        load_config_from_db()

        return jsonify(result)

    # Breeder API routes
    @app.route('/breeders', methods=['GET'])
    @login_required
    def get_breeders_api():
        """Get all breeders."""
        breeders = breeder_handlers.get_breeders()
        return jsonify(breeders)

    @app.route('/breeders', methods=['POST'])
    @login_required
    def add_breeder_api():
        """Add a new breeder."""
        data = request.json
        result = breeder_handlers.add_breeder(data)

        # Reload configuration from database
        from app.config.load_config import load_config_from_db
        load_config_from_db()

        return jsonify(result)

    @app.route('/breeders/<int:breeder_id>', methods=['PUT'])
    @login_required
    def update_breeder_api(breeder_id):
        """Update a breeder."""
        data = request.json
        result = breeder_handlers.update_breeder(breeder_id, data)

        # Reload configuration from database
        from app.config.load_config import load_config_from_db
        load_config_from_db()

        return jsonify(result)

    @app.route('/breeders/<int:breeder_id>', methods=['DELETE'])
    @login_required
    def delete_breeder_api(breeder_id):
        """Delete a breeder."""
        result = breeder_handlers.delete_breeder(breeder_id)

        # Reload configuration from database
        from app.config.load_config import load_config_from_db
        load_config_from_db()

        return jsonify(result)

    # Sensor API routes
    @app.route('/sensorData', methods=['GET'])
    @login_required
    def chart_data():
        """Get sensor data for charts."""
        sensor_id = request.args.get('sensor_id')
        start_date = request.args.get('start_date')
        end_date = request.args.get('end_date')
        data = sensor_handlers.get_sensor_data(sensor_id, start_date, end_date)
        return jsonify(data)

    @app.route('/sensors/grouped', methods=['GET'])
    @login_required
    def grouped_sensors():
        """Get sensors grouped by zone."""
        sensors = sensor_handlers.get_grouped_sensors_with_latest_reading()
        return jsonify(sensors)

    @app.route('/sensors/scanACI', methods=['POST'])
    @login_required
    def scan_ac_infinity_sensors():
        """Scan for AC Infinity sensors."""
        result = sensor_handlers.scan_ac_infinity_sensors()
        return jsonify(result)

    @app.route('/sensors/scanEC', methods=['POST'])
    @login_required
    def scan_ecowitt_sensors():
        """Scan for Ecowitt sensors."""
        result = sensor_handlers.scan_ecowitt_sensors()
        return jsonify(result)

    @app.route('/sensors/edit', methods=['POST'])
    @login_required
    def edit_sensor():
        """Edit a sensor."""
        data = request.json
        result = sensor_handlers.edit_sensor(data)
        return jsonify(result)

    @app.route('/sensors/delete/<int:sensor_id>', methods=['DELETE'])
    @login_required
    def delete_sensor(sensor_id):
        """Delete a sensor."""
        result = sensor_handlers.delete_sensor(sensor_id)
        return jsonify(result)

    # Settings API routes
    @app.route('/settings', methods=['POST'])
    @login_required
    def save_settings():
        """Save settings."""
        data = request.json
        result = settings_handlers.save_settings(data)
        return jsonify(result)

    @app.route('/settings/upload-logo', methods=['POST'])
    @login_required
    def upload_logo():
        """Upload a logo."""
        file = request.files.get('logo')
        result = settings_handlers.upload_logo(file)
        return jsonify(result)

    # Utility routes
    @app.route('/decorateImage', methods=['POST'])
    @login_required
    def decorate_image():
        """Decorate an image with text."""
        file = request.files.get('image')
        text = request.form.get('text', '')
        position = request.form.get('position', 'bottom')
        from app.utils.image import decorate_image as decorate
        result = decorate(file, text, position=position)
        return jsonify(result)

    @app.route(\ /login/simple\)
    def simple_login():
        \\\Render the simple login page.\\\
        return render_template(\views/simple_login.html\, admin_login=False)
        
    @app.route(\/login/auth\)
    def auth_login():
        \\\Render the auth login page.\\\
        return render_template(\auth/login.html\, admin_login=False)
        
    @app.route(\/login/basic\)
    def basic_login():
        \\\Render the basic login page.\\\
        return render_template(\views/login.html\, admin_login=False)

